package main

package main

import (
	"fmt"
	"sync"

)


type Collection struct{
	Data map[string]string
	Mutex sync.Mutex
}

func NewCollection() Collection{
	return Collection{
		Data: make(map[string]string),
	}
}

func ( c *Collection ) Has (key string) bool {
	c.Mutex.Lock()
	defer c.Mutex.Unlock()

	if _ , ok := c.Data[key] ; ok {
		return true
	}
	return false
}

func (c *Collection) Add(key string , value string) {
	
	c.Mutex.Lock()
	defer c.Mutex.Unlock()
	
	// if c.Has(key) {   			if done like this , we will get deadlock error 
	// 	return 						as c.Has() also has c.mutex.lock()
	// }							in order to overcome this , we can re-write the logic for has() below !Note- Not the best way to do!

	if _ , ok := c.Data[key] ; ok {
		return
	}

	c.Data[key] = value
}


func main() {
	
	c := NewCollection()
	c.Add("a" , "cake")

}