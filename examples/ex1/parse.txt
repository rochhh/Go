package link

// this package should be / 

// the main package should be /examples/ex1/main.go for main.go only !

import (
	"fmt"
	"io"
	"log"
	"strings"

	"golang.org/x/net/html"
)

type Link struct{
	// Link string 
	Text string
	Href string
}



// this will take the html doc as input and 
// return a slice of links [<a href="..."] data vals from it
func Parse(r io.Reader) ([]Link , error){
	doc , err := html.Parse(r)

	if err != nil {
		log.Fatal(err)
	}

	nodes := LinkNodes(doc)
	fmt.Println("the nodes are -> " , nodes)
	var links []Link

	for _ , node := range nodes {
		links = append(links, BuildLink(node))
	}

	return links , nil
}


func LinkNodes( n *html.Node) []*html.Node {
	if n.Type == html.ElementNode && n.Data == "a" {
		return []*html.Node{n}
	}
	var ret []*html.Node

	for c := n.FirstChild ; c != nil ; c = c.NextSibling {
		ret = append(ret, LinkNodes(c)...)
	}
	fmt.Println("the ret are => " , ret)
	return ret 
}


func BuildLink(n *html.Node) Link {
	var ret Link

	for _ , attr := range n.Attr{
		if attr.Key == "href"{
			ret.Href = attr.Val
			break
		} 
	}
	ret.Text = Text(n)
	fmt.Println("the ret.Text are <-> " , ret.Text)
	fmt.Println("the ret.href are <-> " , ret.Href)
	return ret
}


func Text ( n *html.Node ) string {

	if n.Type == html.TextNode {
		return n.Data
	} else if (n.Type != html.ElementNode ){
		return ""
	}

	var ret string 

	for c := n.FirstChild ; c != nil ; c = c.NextSibling {
		ret += Text(c) + " "
	}
	return strings.Join(strings.Fields(ret) , " ") 
}